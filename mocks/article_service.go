// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	base_models "github.com/bagastri07/be-test-kumparan/models/base_models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/bagastri07/be-test-kumparan/models"

	testing "testing"
)

// ArticleService is an autogenerated mock type for the ArticleService type
type ArticleService struct {
	mock.Mock
}

// CreateArticle provides a mock function with given fields: ctx, payload
func (_m *ArticleService) CreateArticle(ctx context.Context, payload *models.CreateArticlePayload) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.CreateArticlePayload) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArticlesPagination provides a mock function with given fields: ctx, filter
func (_m *ArticleService) GetArticlesPagination(ctx context.Context, filter *models.ArticleFilter) (*base_models.PaginationResponse, error) {
	ret := _m.Called(ctx, filter)

	var r0 *base_models.PaginationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *models.ArticleFilter) *base_models.PaginationResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*base_models.PaginationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.ArticleFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArticleService creates a new instance of ArticleService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticleService(t testing.TB) *ArticleService {
	mock := &ArticleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
