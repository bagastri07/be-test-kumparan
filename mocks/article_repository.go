// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/bagastri07/be-test-kumparan/models"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	testing "testing"
)

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

// GetArticlesList provides a mock function with given fields: ctx, db, filter
func (_m *ArticleRepository) GetArticlesList(ctx context.Context, db *sqlx.DB, filter *models.ArticleFilter) ([]models.Article, error) {
	ret := _m.Called(ctx, db, filter)

	var r0 []models.Article
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *models.ArticleFilter) []models.Article); ok {
		r0 = rf(ctx, db, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, *models.ArticleFilter) error); ok {
		r1 = rf(ctx, db, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountArticle provides a mock function with given fields: ctx, db, filter
func (_m *ArticleRepository) GetCountArticle(ctx context.Context, db *sqlx.DB, filter *models.ArticleFilter) (uint64, error) {
	ret := _m.Called(ctx, db, filter)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *models.ArticleFilter) uint64); ok {
		r0 = rf(ctx, db, filter)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, *models.ArticleFilter) error); ok {
		r1 = rf(ctx, db, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableName provides a mock function with given fields:
func (_m *ArticleRepository) GetTableName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InsertArticle provides a mock function with given fields: ctx, tx, data
func (_m *ArticleRepository) InsertArticle(ctx context.Context, tx *sqlx.Tx, data *models.Article) error {
	ret := _m.Called(ctx, tx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *models.Article) error); ok {
		r0 = rf(ctx, tx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewArticleRepository creates a new instance of ArticleRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticleRepository(t testing.TB) *ArticleRepository {
	mock := &ArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
